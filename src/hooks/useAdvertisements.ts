
import { useState, useEffect } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { Advertisement, AdvertisementPosition } from '@/types/advertisement';
import { useToast } from '@/hooks/use-toast';

export const useAdvertisements = () => {
  const [advertisements, setAdvertisements] = useState<Advertisement[]>([]);
  const [loading, setLoading] = useState(true);
  const { toast } = useToast();

  const createSampleAds = async () => {
    console.log('üéØ Verificando se h√° an√∫ncios de exemplo...');
    
    const { data: existingAds } = await supabase
      .from('advertisements')
      .select('id')
      .limit(1);

    if (existingAds && existingAds.length > 0) {
      console.log('üìã An√∫ncios j√° existem, pulando cria√ß√£o de exemplos');
      return;
    }

    console.log('‚ûï Criando an√∫ncios de exemplo...');
    
    const sampleAds = [
      {
        title: 'An√∫ncio AdSense Header',
        type: 'adsense' as const,
        content: `
          <ins class="adsbygoogle"
               style="display:block"
               data-ad-client="ca-pub-6206525680408961"
               data-ad-slot="1234567890"
               data-ad-format="auto"
               data-full-width-responsive="true"></ins>
        `,
        position: 'header' as const,
        is_active: true
      },
      {
        title: 'An√∫ncio AdSense Entre Artigos',
        type: 'adsense' as const,
        content: `
          <ins class="adsbygoogle"
               style="display:block; text-align:center;"
               data-ad-layout="in-article"
               data-ad-format="fluid"
               data-ad-client="ca-pub-6206525680408961"
               data-ad-slot="0987654321"></ins>
        `,
        position: 'between_articles' as const,
        is_active: true
      },
      {
        title: 'An√∫ncio AdSense Sidebar',
        type: 'adsense' as const,
        content: `
          <ins class="adsbygoogle"
               style="display:block"
               data-ad-client="ca-pub-6206525680408961"
               data-ad-slot="5555555555"
               data-ad-format="auto"
               data-full-width-responsive="true"></ins>
        `,
        position: 'sidebar' as const,
        is_active: true
      },
      {
        title: 'An√∫ncio AdSense Rodap√© do Artigo',
        type: 'adsense' as const,
        content: `
          <ins class="adsbygoogle"
               style="display:block"
               data-ad-client="ca-pub-6206525680408961"
               data-ad-slot="7777777777"
               data-ad-format="auto"
               data-full-width-responsive="true"></ins>
        `,
        position: 'article_footer' as const,
        is_active: true
      },
      {
        title: 'An√∫ncio AdSense Rodap√© do Site',
        type: 'adsense' as const,
        content: `
          <ins class="adsbygoogle"
               style="display:block"
               data-ad-client="ca-pub-6206525680408961"
               data-ad-slot="9999999999"
               data-ad-format="auto"
               data-full-width-responsive="true"></ins>
        `,
        position: 'site_footer' as const,
        is_active: true
      }
    ];

    try {
      const { error } = await supabase
        .from('advertisements')
        .insert(sampleAds);

      if (error) {
        console.error('‚ùå Erro ao criar an√∫ncios de exemplo:', error);
      } else {
        console.log('‚úÖ An√∫ncios de exemplo criados com sucesso');
      }
    } catch (error) {
      console.error('üí• Erro cr√≠tico ao criar an√∫ncios de exemplo:', error);
    }
  };

  const fetchAdvertisements = async () => {
    try {
      console.log('üîÑ Buscando todos os an√∫ncios...');
      const { data, error } = await supabase
        .from('advertisements')
        .select('*')
        .order('created_at', { ascending: false });

      if (error) {
        console.error('‚ùå Erro ao buscar an√∫ncios:', error);
        throw error;
      }
      
      console.log('üìã An√∫ncios encontrados:', data?.length || 0);
      setAdvertisements((data || []) as Advertisement[]);
    } catch (error) {
      console.error('üí• Erro cr√≠tico ao buscar an√∫ncios:', error);
      toast({
        title: "Erro",
        description: "N√£o foi poss√≠vel carregar os an√∫ncios",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  const getActiveAdvertisements = async (position?: AdvertisementPosition) => {
    try {
      console.log(`üéØ Buscando an√∫ncios ativos para posi√ß√£o: ${position || 'todas'}`);
      
      let query = supabase
        .from('advertisements')
        .select('*')
        .eq('is_active', true);

      if (position) {
        query = query.eq('position', position);
      }

      const { data, error } = await query;
      
      if (error) {
        console.error('‚ùå Erro ao buscar an√∫ncios ativos:', error);
        throw error;
      }
      
      console.log(`üìä An√∫ncios brutos encontrados: ${data?.length || 0}`);
      
      const filteredAds = (data?.filter(ad => {
        const now = new Date();
        const startDate = ad.start_date ? new Date(ad.start_date) : null;
        const endDate = ad.end_date ? new Date(ad.end_date) : null;
        
        const isActive = (!startDate || startDate <= now) && (!endDate || endDate >= now);
        
        if (!isActive) {
          console.log(`‚è∞ An√∫ncio fora do per√≠odo: ${ad.title} (${ad.start_date} - ${ad.end_date})`);
        }
        
        return isActive;
      }) || []) as Advertisement[];
      
      console.log(`‚úÖ An√∫ncios filtrados (ativos): ${filteredAds.length}`);
      filteredAds.forEach(ad => {
        console.log(`   ‚Ä¢ ${ad.title} (${ad.type}) - Posi√ß√£o: ${ad.position}`);
      });
      
      return filteredAds;
    } catch (error) {
      console.error('üí• Erro cr√≠tico ao buscar an√∫ncios ativos:', error);
      return [];
    }
  };

  const createAdvertisement = async (advertisement: Omit<Advertisement, 'id' | 'created_at' | 'updated_at' | 'click_count' | 'impression_count'>) => {
    try {
      console.log('‚ûï Criando novo an√∫ncio:', advertisement.title);
      
      const { data, error } = await supabase
        .from('advertisements')
        .insert([advertisement])
        .select()
        .single();

      if (error) throw error;

      console.log('‚úÖ An√∫ncio criado com sucesso:', data.id);
      setAdvertisements(prev => [data as Advertisement, ...prev]);
      toast({
        title: "Sucesso",
        description: "An√∫ncio criado com sucesso",
      });

      return data as Advertisement;
    } catch (error) {
      console.error('‚ùå Erro ao criar an√∫ncio:', error);
      toast({
        title: "Erro",
        description: "N√£o foi poss√≠vel criar o an√∫ncio",
        variant: "destructive",
      });
      throw error;
    }
  };

  const updateAdvertisement = async (id: string, updates: Partial<Advertisement>) => {
    try {
      console.log(`üìù Atualizando an√∫ncio: ${id}`);
      
      const { data, error } = await supabase
        .from('advertisements')
        .update(updates)
        .eq('id', id)
        .select()
        .single();

      if (error) throw error;

      console.log('‚úÖ An√∫ncio atualizado com sucesso');
      setAdvertisements(prev => 
        prev.map(ad => ad.id === id ? { ...ad, ...data } as Advertisement : ad)
      );

      toast({
        title: "Sucesso",
        description: "An√∫ncio atualizado com sucesso",
      });

      return data as Advertisement;
    } catch (error) {
      console.error('‚ùå Erro ao atualizar an√∫ncio:', error);
      toast({
        title: "Erro",
        description: "N√£o foi poss√≠vel atualizar o an√∫ncio",
        variant: "destructive",
      });
      throw error;
    }
  };

  const deleteAdvertisement = async (id: string) => {
    try {
      console.log(`üóëÔ∏è Excluindo an√∫ncio: ${id}`);
      
      const { error } = await supabase
        .from('advertisements')
        .delete()
        .eq('id', id);

      if (error) throw error;

      console.log('‚úÖ An√∫ncio exclu√≠do com sucesso');
      setAdvertisements(prev => prev.filter(ad => ad.id !== id));
      toast({
        title: "Sucesso",
        description: "An√∫ncio exclu√≠do com sucesso",
      });
    } catch (error) {
      console.error('‚ùå Erro ao excluir an√∫ncio:', error);
      toast({
        title: "Erro",
        description: "N√£o foi poss√≠vel excluir o an√∫ncio",
        variant: "destructive",
      });
      throw error;
    }
  };

  const trackImpression = async (advertisementId: string) => {
    try {
      console.log(`üìà Rastreando impress√£o para an√∫ncio: ${advertisementId}`);
      
      // Atualizar contador de impress√µes
      const { data: currentAd } = await supabase
        .from('advertisements')
        .select('impression_count')
        .eq('id', advertisementId)
        .single();

      if (currentAd) {
        await supabase
          .from('advertisements')
          .update({ impression_count: (currentAd.impression_count || 0) + 1 })
          .eq('id', advertisementId);
        
        console.log(`‚úÖ Impress√£o registrada. Novo total: ${(currentAd.impression_count || 0) + 1}`);
      }
    } catch (error) {
      console.error('‚ùå Erro ao rastrear impress√£o:', error);
    }
  };

  const trackClick = async (advertisementId: string) => {
    try {
      console.log(`üñ±Ô∏è Rastreando clique para an√∫ncio: ${advertisementId}`);
      
      // Atualizar contador de cliques
      const { data: currentAd } = await supabase
        .from('advertisements')
        .select('click_count')
        .eq('id', advertisementId)
        .single();

      if (currentAd) {
        await supabase
          .from('advertisements')
          .update({ click_count: (currentAd.click_count || 0) + 1 })
          .eq('id', advertisementId);
        
        console.log(`‚úÖ Clique registrado. Novo total: ${(currentAd.click_count || 0) + 1}`);
      }
    } catch (error) {
      console.error('‚ùå Erro ao rastrear clique:', error);
    }
  };

  useEffect(() => {
    const initializeAds = async () => {
      await createSampleAds();
      await fetchAdvertisements();
    };
    
    initializeAds();
  }, []);

  return {
    advertisements,
    loading,
    fetchAdvertisements,
    getActiveAdvertisements,
    createAdvertisement,
    updateAdvertisement,
    deleteAdvertisement,
    trackImpression,
    trackClick
  };
};


// Utilit√°rio para debugar meta tags de redes sociais

export interface MetaTagInfo {
  name: string;
  content: string;
  found: boolean;
}

export interface SocialMetaDebugInfo {
  title: string;
  description: string;
  image: string;
  url: string;
  ogTags: MetaTagInfo[];
  twitterTags: MetaTagInfo[];
  structuredData: any;
  imageValidation: {
    url: string;
    isValid: boolean;
    error?: string;
  };
}

export const debugSocialMetaTags = async (): Promise<SocialMetaDebugInfo> => {
  const getMetaContent = (selector: string): string => {
    const element = document.querySelector(selector) as HTMLMetaElement;
    return element ? element.content : '';
  };

  const checkMetaTag = (selector: string, name: string): MetaTagInfo => {
    const element = document.querySelector(selector) as HTMLMetaElement;
    return {
      name,
      content: element ? element.content : '',
      found: !!element
    };
  };

  const ogTags = [
    checkMetaTag('meta[property="og:title"]', 'og:title'),
    checkMetaTag('meta[property="og:description"]', 'og:description'),
    checkMetaTag('meta[property="og:image"]', 'og:image'),
    checkMetaTag('meta[property="og:url"]', 'og:url'),
    checkMetaTag('meta[property="og:type"]', 'og:type'),
    checkMetaTag('meta[property="og:site_name"]', 'og:site_name'),
    checkMetaTag('meta[property="og:image:width"]', 'og:image:width'),
    checkMetaTag('meta[property="og:image:height"]', 'og:image:height'),
    checkMetaTag('meta[property="og:locale"]', 'og:locale'),
  ];

  const twitterTags = [
    checkMetaTag('meta[property="twitter:card"]', 'twitter:card'),
    checkMetaTag('meta[property="twitter:title"]', 'twitter:title'),
    checkMetaTag('meta[property="twitter:description"]', 'twitter:description'),
    checkMetaTag('meta[property="twitter:image"]', 'twitter:image'),
    checkMetaTag('meta[property="twitter:site"]', 'twitter:site'),
    checkMetaTag('meta[property="twitter:creator"]', 'twitter:creator'),
  ];

  // Obter dados estruturados
  let structuredData = null;
  const jsonLdScript = document.querySelector('script[type="application/ld+json"]');
  if (jsonLdScript) {
    try {
      structuredData = JSON.parse(jsonLdScript.textContent || '');
    } catch (error) {
      console.error('Erro ao parsear JSON-LD:', error);
    }
  }

  const imageUrl = getMetaContent('meta[property="og:image"]');
  const imageValidation = await validateImageUrl(imageUrl);

  return {
    title: document.title,
    description: getMetaContent('meta[name="description"]'),
    image: imageUrl,
    url: window.location.href,
    ogTags,
    twitterTags,
    structuredData,
    imageValidation
  };
};

// Fun√ß√£o melhorada para validar URLs de imagem
export const validateImageUrl = async (url: string): Promise<{url: string; isValid: boolean; error?: string}> => {
  if (!url) {
    return { url: '', isValid: false, error: 'URL n√£o fornecida' };
  }

  return new Promise((resolve) => {
    const img = new Image();
    const timeout = setTimeout(() => {
      resolve({ url, isValid: false, error: 'Timeout - imagem demorou muito para carregar' });
    }, 10000);

    img.onload = () => {
      clearTimeout(timeout);
      resolve({ url, isValid: true });
    };
    
    img.onerror = () => {
      clearTimeout(timeout);
      resolve({ url, isValid: false, error: 'Erro ao carregar imagem' });
    };
    
    img.src = url;
  });
};

// Fun√ß√£o para gerar relat√≥rio detalhado
export const generateDebugReport = async (): Promise<string> => {
  const debug = await debugSocialMetaTags();
  
  let report = `
=== üîç RELAT√ìRIO DE DEBUG - META TAGS SOCIAIS ===

üìÑ Informa√ß√µes B√°sicas:
- T√≠tulo: ${debug.title}
- Descri√ß√£o: ${debug.description}
- URL: ${debug.url}
- Imagem: ${debug.image}
- Imagem v√°lida: ${debug.imageValidation.isValid ? '‚úÖ Sim' : '‚ùå N√£o'}
${debug.imageValidation.error ? `- Erro da imagem: ${debug.imageValidation.error}` : ''}

üîµ Open Graph Tags (Facebook, WhatsApp, LinkedIn):
`;

  debug.ogTags.forEach(tag => {
    const status = tag.found ? '‚úÖ' : '‚ùå';
    const content = tag.content ? `"${tag.content}"` : '(vazio)';
    report += `- ${tag.name}: ${status} ${content}\n`;
  });

  report += `
üê¶ Twitter Tags:
`;

  debug.twitterTags.forEach(tag => {
    const status = tag.found ? '‚úÖ' : '‚ùå';
    const content = tag.content ? `"${tag.content}"` : '(vazio)';
    report += `- ${tag.name}: ${status} ${content}\n`;
  });

  report += `
üìä Dados Estruturados (JSON-LD):
${debug.structuredData ? '‚úÖ Presentes' : '‚ùå Ausentes'}
`;

  if (debug.structuredData) {
    report += `
- Tipo: ${debug.structuredData['@type'] || 'N√£o especificado'}
- T√≠tulo: ${debug.structuredData.headline || 'N√£o especificado'}
- Autor: ${debug.structuredData.author?.name || 'N√£o especificado'}
`;
  }

  report += `
üîó URLs para Teste e Valida√ß√£o:
- Facebook Debugger: https://developers.facebook.com/tools/debug/?q=${encodeURIComponent(debug.url)}
- Twitter Card Validator: https://cards-dev.twitter.com/validator
- LinkedIn Post Inspector: https://www.linkedin.com/post-inspector/
- WhatsApp Business API: https://developers.facebook.com/tools/debug/

üì± Espec√≠fico para WhatsApp:
- Cache muito agressivo - pode levar at√© 7 dias para atualizar
- Usa principalmente og:title, og:description e og:image
- Requer imagens com pelo menos 300x157px (recomendado: 1200x630px)

üìù Recomenda√ß√µes e Alertas:
`;

  // Alertas espec√≠ficos
  if (!debug.imageValidation.isValid) {
    report += '‚ö†Ô∏è  CR√çTICO: Imagem n√£o est√° acess√≠vel - isto impedir√° o compartilhamento correto\n';
  }
  
  if (!debug.ogTags.find(t => t.name === 'og:image:width')?.found) {
    report += '‚ö†Ô∏è  Considere adicionar og:image:width para melhor compatibilidade\n';
  }
  
  if (!debug.ogTags.find(t => t.name === 'og:image:height')?.found) {
    report += '‚ö†Ô∏è  Considere adicionar og:image:height para melhor compatibilidade\n';
  }
  
  if (debug.description.length > 160) {
    report += '‚ö†Ô∏è  Descri√ß√£o muito longa para algumas redes sociais (m√°x. 160 caracteres)\n';
  }
  
  if (debug.description.length < 50) {
    report += '‚ö†Ô∏è  Descri√ß√£o muito curta - considere expandir (m√≠n. 50 caracteres)\n';
  }

  if (!debug.ogTags.find(t => t.name === 'og:type')?.found) {
    report += '‚ö†Ô∏è  Adicione og:type para melhor categoriza√ß√£o\n';
  }

  report += `
üöÄ Dicas para For√ßar Atualiza√ß√£o no WhatsApp:
1. Use o Facebook Debugger para limpar o cache
2. Adicione par√¢metros √† URL (?v=timestamp)
3. Aguarde at√© 7 dias para atualiza√ß√£o natural
4. Teste com diferentes n√∫meros de telefone

‚è∞ Timestamp desta an√°lise: ${new Date().toLocaleString('pt-BR')}
`;

  return report;
};

// Fun√ß√£o para debug no console
export const debugToConsole = async () => {
  console.log('üîç Iniciando debug das meta tags...');
  const report = await generateDebugReport();
  console.log(report);
  return debugSocialMetaTags();
};

// Disponibilizar globalmente
if (typeof window !== 'undefined') {
  (window as any).debugSocialMeta = debugToConsole;
  console.log('üõ†Ô∏è Debug dispon√≠vel globalmente: window.debugSocialMeta()');
}
